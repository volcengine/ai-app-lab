"use strict";let __rslib_import_meta_url__="undefined"==typeof document?new(require("url".replace("",""))).URL("file:"+__filename).href:document.currentScript&&document.currentScript.src||new URL("main.js",document.baseURI).href;var __webpack_require__={};__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__={};__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MultiModalSDKBridgeError:()=>MultiModalSDKBridgeError,appendStreamingTTS:()=>appendStreamingTTS,cancelStreamingTTS:()=>cancelStreamingTTS,cancelTTS:()=>cancelTTS,setBridgeTraceLogger:()=>setBridgeTraceLogger,startASR:()=>startASR,getQuestionSegmentList:()=>getQuestionSegmentList,APIInvalidResultError:()=>APIInvalidResultError,cancelCompletionStreaming:()=>cancelCompletionStreaming,stopASR:()=>stopASR,onASRResult:()=>onASRResult,getImageInfo:()=>getImageInfo,getSAMInfo:()=>getSAMInfo,startTTS:()=>startTTS,APICallFailedError:()=>APICallFailedError,APIInvalidParamsError:()=>APIInvalidParamsError,chatCompletionStreaming:()=>chatCompletionStreaming,createStreamingTTS:()=>createStreamingTTS,APIUnauthorizedError:()=>APIUnauthorizedError,chatCompletion:()=>chatCompletion,closeApp:()=>closeApp,APICallInternalError:()=>APICallInternalError,APICallError:()=>APICallError,APIUnregisteredError:()=>APIUnregisteredError,getObjectDetectList:()=>getObjectDetectList,readCompletionStreaming:()=>readCompletionStreaming,setBridgeTraceEnabled:()=>setBridgeTraceEnabled});let bridgeTraceEnabled=!1,traceLogger=console.debug,APPLET_BRIDGE_TRACE_TAG="[Applet Bridge]";function bridgeTrace(...e){bridgeTraceEnabled&&traceLogger("[Applet Bridge]",...e)}function setBridgeTraceEnabled(e){bridgeTraceEnabled=e}function setBridgeTraceLogger(e){traceLogger=e}function hasStringProperty(e,t,r){let a=e[t];return void 0===a?r?.optional===!0:"string"==typeof a}function assertStringProperty(e,t,r){if(!hasStringProperty(e,t,r))throw TypeError(`expect type of "${String(t)}" to be string`)}function hasNumberProperty(e,t,r){let a=e[t];return void 0===a?r?.optional===!0:"number"==typeof a}function assertNumberProperty(e,t,r){if(!hasNumberProperty(e,t,r))throw TypeError(`expect type of "${String(t)}" to be number`)}function hasObjectProperty(e,t,r){let{typeGuard:a,optional:l}=r??{},n=e[t];return void 0===n?!0===l:"object"==typeof n&&null!==n&&a?.(n)!==!1}function assertObjectProperty(e,t,r){let{expectedType:a="object"}=r??{};if(!hasObjectProperty(e,t,r))throw TypeError(`expect type of "${String(t)}" to be ${a}`)}let trace=(...e)=>bridgeTrace("[Call Result]",...e);var call_result_ResultCode=function(e){return e[e.SUCCESS=1]="SUCCESS",e[e.FAILED=0]="FAILED",e[e.UNAUTHORIZED=-1]="UNAUTHORIZED",e[e.UNREGISTERED=-2]="UNREGISTERED",e[e.INVALID_PARAMS=-3]="INVALID_PARAMS",e[e.INVALID_RESULT=-4]="INVALID_RESULT",e[e.SETTING_DISABLE=-6]="SETTING_DISABLE",e}({}),call_result_ErrorMessages=null;class CallResult{}class SuccessCallResult extends CallResult{data;constructor(e){super(),this.data=e}static withData(e){return new SuccessCallResult(e)}accept(e){return e.success(this)}toRaw(){return{code:1,data:this.data}}}class FailedCallResult extends CallResult{msg;data;constructor(e,t){super(),this.msg=e,this.data=t}static withReason(e){return new FailedCallResult(e)}static withReasonAndData(e,t){return new FailedCallResult(e,t)}accept(e){return e.failed(this)}toRaw(){return{code:0,msg:this.msg,data:this.data}}}class InternalErrorCallResult extends CallResult{code;msg;constructor(e,t){super(),this.code=e,this.msg=t}static invalidParams(){return new InternalErrorCallResult(-3,"Invalid params")}static unregistered(){return new InternalErrorCallResult(-2,"Function not found")}static invalidResult(){return new InternalErrorCallResult(-4,"Invalid result")}static runtimeForbidden(e){return new InternalErrorCallResult(-2,e)}accept(e){return e.internalError(this)}toRaw(){return{code:this.code,msg:this.msg}}}function assertRawCallResult(e){assertNumberProperty(e,"code"),assertStringProperty(e,"msg",{optional:!0}),assertObjectProperty(e,"data",{optional:!0})}function parseCallResult(e){if(1===e.code){if(void 0===e.data)throw TypeError('undefined "data"');return trace('parsed "success"',e.data),SuccessCallResult.withData(e.data)}if(0===e.code){let{msg:t,data:r}=e;if(void 0===t)throw TypeError('undefined "msg"');return(trace('parsed "failed"',t,r),void 0===r)?FailedCallResult.withReason(t):FailedCallResult.withReasonAndData(t,r)}if(void 0===e.msg)throw TypeError('undefined "msg"');return trace('parsed "internal error"',e.msg),new InternalErrorCallResult(e.code,e.msg)}function parseCallResultOrInvalid(e){try{return parseCallResult(e)}catch(e){return InternalErrorCallResult.invalidResult()}}function transformDataType(e,t){return{success:t=>e?.(t.data)===!1?InternalErrorCallResult.invalidResult():t,failed:e=>e.data&&t?.(e.data)===!1?InternalErrorCallResult.invalidResult():e,internalError:e=>e}}class APICallError extends Error{code;apiName;name;constructor(e,t,r){super(r?`${r}: ${t}`:t),this.code=e,this.apiName=r,this.name="APICallError",Object.setPrototypeOf(this,new.target.prototype)}}class APICallFailedError extends APICallError{name="APICallFailedError";data;constructor(e,t,r){super(call_result_ResultCode.FAILED,e,r),this.data=t}toCallResult(){return new FailedCallResult(this.message,this.data)}}class APICallInternalError extends APICallError{name="APICallInternalError";constructor(e,t,r){super(e,t,r)}static fromCallResult(e,t){switch(e.code){case call_result_ResultCode.UNAUTHORIZED:return new APIUnauthorizedError(e.code,e.msg,t);case call_result_ResultCode.UNREGISTERED:return new APIUnregisteredError(e.code,e.msg,t);case call_result_ResultCode.INVALID_PARAMS:return new APIInvalidParamsError(e.code,e.msg,t);case call_result_ResultCode.INVALID_RESULT:return new APIInvalidResultError(e.code,e.msg,t);default:return new APICallInternalError(e.code,e.msg,t)}}toCallResult(){return new InternalErrorCallResult(this.code,this.message)}}class APIUnauthorizedError extends APICallInternalError{name="APIUnauthorizedError"}class APIUnregisteredError extends APICallInternalError{name="APIUnregisteredError"}class APIInvalidParamsError extends APICallInternalError{name="APIInvalidParamsError"}class APIInvalidResultError extends APICallInternalError{name="APIInvalidResultError"}class MultiModalSDKBridgeError extends APICallError{name="MultiModalSDKBridgeError";constructor(){super(call_result_ResultCode.UNREGISTERED,"Bridge unavailable")}toCallResult(){return new InternalErrorCallResult(call_result_ResultCode.UNREGISTERED,"Bridge unavailable")}}function isTargetEntity(e){return"scope"in e&&"string"==typeof e.scope&&"target"in e&&"string"==typeof e.target&&(!("instance"in e)||void 0===e.instance||"string"==typeof e.instance)}let targets={clientAPI:()=>({scope:"system",target:"bridge"})},message_trace=(...e)=>bridgeTrace("[Message]",...e);var message_MessageType=null;class FunctionCallMessage{name;params;callbackId;target;constructor(e){this.name=e.name,this.params=e.params??{},this.callbackId=e.callbackId,this.target=e.target}accept(e){return e.functionCall(this)}toPlainObject(){return{type:"call",name:this.name,params:this.params,callbackId:this.callbackId,target:this.target}}}class CallbackMessage{params;callbackId;constructor(e){this.params=e.params,this.callbackId=e.callbackId}get parsedParams(){return parseCallResultOrInvalid(this.params)}static fromCallMessage(e,t){return new CallbackMessage({params:t.toRaw(),callbackId:e.callbackId})}accept(e){return e.callback(this)}toPlainObject(){return{type:"callback",params:this.params,callbackId:this.callbackId}}}class EventMessage{static _nextTraceId=0;name;params;timestamp;callbackId;constructor(e){let{name:t,params:r={},timestamp:a=Date.now(),callbackId:l=EventMessage._nextTraceId++}=e;this.name=t,this.params=r,this.timestamp=a,this.callbackId=l}accept(e){return e.event(this)}toPlainObject(){return{type:"event",name:this.name,params:this.params,timestamp:this.timestamp}}}function parseFunctionCallMessage(e){return assertStringProperty(e,"name"),assertNumberProperty(e,"callbackId"),assertObjectProperty(e,"target",{typeGuard:isTargetEntity,expectedType:"TargetEntity"}),assertObjectProperty(e,"params",{optional:!0}),new FunctionCallMessage(e)}function parseCallbackMessage(e){return assertObjectProperty(e,"params"),assertRawCallResult(e.params),assertNumberProperty(e,"callbackId"),new CallbackMessage({params:e.params,callbackId:e.callbackId})}function parseEventMessage(e){return assertStringProperty(e,"name"),assertObjectProperty(e,"params",{optional:!0}),assertNumberProperty(e,"timestamp"),new EventMessage(e)}function parseMessage(e){if("object"!=typeof e||null===e)throw TypeError("expect Message to be an object");switch(assertStringProperty(e,"type"),e.type){case"call":return message_trace("parse as function call"),parseFunctionCallMessage(e);case"callback":return message_trace("parse as callback"),parseCallbackMessage(e);case"event":return message_trace("parse as event"),parseEventMessage(e);default:throw TypeError(`unrecognized message type ${e.type}`)}}let BRIDGE_READY_EVENT_NAME="__bridge_ready__",MESSAGE_PORT_CHANNEL_INIT="__channel_init__",MESSAGE_PORT_CHANNEL_ACK="__channel_ack__";class Bridge{}let LYNXVIEW_BRIDGE_TRACE_TAG="[LynxView]",lynxview_trace=(...e)=>bridgeTrace("[LynxView]",...e);class LynxBridgeImpl extends Bridge{handshake=!1;available=!0;receiver;init(){if(!lynx.__isSSRInternalUsage)try{__LEPUS__||lynx.getJSModule("GlobalEventEmitter").addListener("__APPLET_BRIDGE__",e=>{lynxview_trace("receive from client",e),this.receiver?.(parseMessage(e))})}catch(e){console.error("Applet bridge initialization failed"),lynxview_trace(e),this.available=!1}}notifyReady(){this.handshake||lynx.__isSSRInternalUsage||(NativeModules.AppletBridgeModule.postMessage(new EventMessage({name:BRIDGE_READY_EVENT_NAME}).toPlainObject()),this.handshake=!0)}call(e){if(!lynx.__isSSRInternalUsage){if(lynxview_trace("call to client",e),!this.available)throw new MultiModalSDKBridgeError;NativeModules.AppletBridgeModule.postMessage(e.toPlainObject())}}listen(e){this.receiver=e}}let bridge=new LynxBridgeImpl,WEBVIEW_BRIDGE_TRACE_TAG="[WebView]",webview_trace=(...e)=>bridgeTrace("[WebView]",...e);function sendMessageFromGlobal(e){webview_trace("(global) call to client",e),AppletBridgeModule.postMessage(JSON.stringify(e.toPlainObject()))}function sendMessage(e){let{port:t}=globalThis.onWebViewMessage;t?(webview_trace("(MessagePort) call to client",e),t.postMessage(JSON.stringify(e.toPlainObject()))):sendMessageFromGlobal(e)}function makeGlobalBridgeReceiver(){let e=new Set,t=!1,r=!0,a=e=>{let t=e.ports[0];"__channel_init__"===e.data&&t&&(globalThis.removeEventListener("message",a),l.port=t,t.onmessage=e=>{if(e&&"string"==typeof e.data){webview_trace("(MessagePort) receive from client",e.data);try{l(e.data)}catch(e){throw webview_trace("(MessagePort) receive raw message error",e),e}}},t.postMessage("__channel_ack__"))},l=t=>{webview_trace("(global) receive from client",t);let r=parseMessage(JSON.parse(t));for(let t of e)t(r)};return l.on=t=>void e.add(t),l.off=t=>void e.delete(t),l.isAvailable=()=>r,l.notifyReady=()=>{if(!t){try{sendMessageFromGlobal(new EventMessage({name:BRIDGE_READY_EVENT_NAME}))}catch(e){console.error("Applet bridge initialization failed"),webview_trace(e),r=!1}t=!0}},l.port=void 0,l._testReset=()=>{globalThis.removeEventListener("message",a),globalThis.addEventListener?.("message",a)},globalThis.addEventListener?.("message",a),l}class WebViewBridgeImpl extends Bridge{receiver;get available(){return this.receiver?.isAvailable()??!1}init(){globalThis.onWebViewMessage??=makeGlobalBridgeReceiver(),this.receiver=globalThis.onWebViewMessage}notifyReady(){this.receiver?.notifyReady()}call(e){if(!this.available)throw new MultiModalSDKBridgeError;sendMessage(e)}listen(e){this.receiver?.on(e)}}let webview_bridge=new WebViewBridgeImpl,isLynxView="object"==typeof lynx&&"object"==typeof NativeModules,bridge_bridge=isLynxView?bridge:webview_bridge;bridge_bridge.init(),bridge_bridge.notifyReady();let EVENT_CENTER_TRACE_TAG="[EventCenter]",event_center_trace=(...e)=>bridgeTrace("[EventCenter]",...e);class EventCenter{_functionCallHandlers={};_callbackHandlers={};_rawCallbackHandlers={};_eventHandlers={};_clientBridge;constructor(e){this._clientBridge=e,this._clientBridge.listen(e=>{e.accept({functionCall:e=>void this.dispatchCallMessage(e),callback:e=>this.dispatchCallbackMessage(e),event:e=>this.dispatchEventMessage(e)})}),globalThis.globalEventIDGenerator??=(()=>{let e=1;return{next:()=>e++,reset:()=>{e=1}}})()}get nextCallbackId(){return globalThis.globalEventIDGenerator.next()}registerFunctionCallHandler(e,t,r){event_center_trace("register function call handler",e);let{typeGuard:a,allowOverwrite:l=!1}=r??{};if(!l&&this._functionCallHandlers[e])throw Error(`Function call handler already exists for function name ${e}`);let n=e=>{if(a?.(e)===!1)throw APICallInternalError.fromCallResult(InternalErrorCallResult.invalidParams());return t(e)};return this._functionCallHandlers[e]=n,()=>{this._functionCallHandlers[e]===n&&delete this._functionCallHandlers[e]}}registerEventHandler(e,t,r){event_center_trace("register event handler",e);let{typeGuard:a}=r??{},l=e=>{a?.(e)!==!1&&t(e)};return this._eventHandlers[e]??=new Set,this._eventHandlers[e].add(l),()=>{this._eventHandlers[e].delete(l)}}registerCallback(e,t,r){let{typeGuard:a,apiName:l}=r??{},n=this.nextCallbackId;return event_center_trace(`register callback handler for id: ${n}`),this._callbackHandlers[n]=r=>r.accept(transformDataType(a)).accept({success:t=>e(t.data),failed:e=>t(new APICallFailedError(e.msg,e.data,l)),internalError:e=>t(APICallInternalError.fromCallResult(e,l))}),n}registerRawCallback(e){let t=this.nextCallbackId;return event_center_trace(`register raw callback handler for id: ${t}`),this._rawCallbackHandlers[t]=e,t}async dispatchCallMessage(e){event_center_trace(`dispatch call message. name = ${e.name},`,e.params);let t=t=>{event_center_trace("send callback",t),this._clientBridge.call(CallbackMessage.fromCallMessage(e,t))};if(!e.name)return t(InternalErrorCallResult.invalidParams());let r=this._functionCallHandlers[e.name];if(!r)return t(InternalErrorCallResult.unregistered());let{params:a}=e;try{event_center_trace("invoke function call handler");let e=await r(a);t(SuccessCallResult.withData(e))}catch(e){t(e instanceof APICallError?e.toCallResult():e instanceof Error?FailedCallResult.withReason(e.message):e?FailedCallResult.withReason(e.toString()):FailedCallResult.withReason("Function invocation failed: unknown error"))}}dispatchCallbackMessage(e){event_center_trace(`dispatch callback message. id = ${e.callbackId}`);let{callbackId:t}=e,r=this._callbackHandlers[t],a=this._rawCallbackHandlers[t];try{event_center_trace("invoke callback handler"),r&&(delete this._callbackHandlers[t],r(e.parsedParams)),a&&(delete this._rawCallbackHandlers[t],a(e.params))}catch(e){console.error(e)}}dispatchEventMessage(e){if(event_center_trace(`dispatch event message. name = ${e.name},`,e.params),!e.name)return;let{params:t}=e,r=this._eventHandlers[e.name];if(event_center_trace(`handlers to invoke: ${r?.size??0}`),r&&0!==r.size)for(let e of r)try{e(t)}catch(e){console.error(e)}}}let eventCenter=new EventCenter(bridge_bridge),client_api_trace=(...e)=>bridgeTrace("[Client API]",...e);function callAppletAPI(e,t,r){return new Promise((a,l)=>{let{resultTypeGuard:n,transformParams:s}=r??{};try{client_api_trace("call AppletBridge",e,t),bridge_bridge.call(new FunctionCallMessage({name:e,params:s?s(t):t,target:targets.clientAPI(),callbackId:eventCenter.registerCallback(a,l,{typeGuard:n,apiName:e})}))}catch(e){client_api_trace("call AppletBridge error",e),l(e)}})}function clientAPIWrapper(e,t,r){return a=>e(t,a??{},r)}function listenAppletBridgeEvent(e,t,r){return client_api_trace("listen AppletBridge event",e),eventCenter.registerEventHandler(e,t,{typeGuard:r})}function createAPI(e,t){return clientAPIWrapper(callAppletAPI,e,t)}let subscribeEvent=createAPI("applet.subscribeEvent"),unsubscribeEvent=createAPI("applet.unsubscribeEvent");function createEvent(e,t){let{paramsTypeGuard:r,isPrivate:a=!1}=t??{},l=!1;return t=>(a||l||(subscribeEvent({eventName:e,timestamp:Date.now()}),l=!0),listenAppletBridgeEvent(e,t,r))}let startASR=createAPI("applet.multimodal.startASR"),stopASR=createAPI("applet.multimodal.stopASR"),onASRResult=createEvent("applet.multimodal.ASRResult"),closeApp=createAPI("app.close"),getQuestionSegmentList=createAPI("mind.getQuestionSegmentList"),startTTS=createAPI("applet.multimodal.startTTS"),cancelTTS=createAPI("applet.multimodal.cancelTTS"),createStreamingTTS=createAPI("applet.multimodal.createStreamingTTS"),appendStreamingTTS=createAPI("applet.multimodal.appendStreamingTTS"),cancelStreamingTTS=createAPI("applet.multimodal.cancelStreamingTTS"),getImageInfo=createAPI("applet.multimodal.getImageInfo"),getObjectDetectList=createAPI("applet.multimodal.getObjectDetectList"),getSAMInfo=createAPI("applet.multimodal.getSAMInfo"),chatCompletion=createAPI("applet.multimodal.chatCompletion"),chatCompletionStreaming=createAPI("applet.multimodal.chatCompletionStreamingRequest"),readCompletionStreaming=createAPI("applet.multimodal.chatCompletionStreamingRead"),cancelCompletionStreaming=createAPI("applet.multimodal.cancelCompletionStreaming");for(var __webpack_i__ in exports.APICallError=__webpack_exports__.APICallError,exports.APICallFailedError=__webpack_exports__.APICallFailedError,exports.APICallInternalError=__webpack_exports__.APICallInternalError,exports.APIInvalidParamsError=__webpack_exports__.APIInvalidParamsError,exports.APIInvalidResultError=__webpack_exports__.APIInvalidResultError,exports.APIUnauthorizedError=__webpack_exports__.APIUnauthorizedError,exports.APIUnregisteredError=__webpack_exports__.APIUnregisteredError,exports.MultiModalSDKBridgeError=__webpack_exports__.MultiModalSDKBridgeError,exports.appendStreamingTTS=__webpack_exports__.appendStreamingTTS,exports.cancelCompletionStreaming=__webpack_exports__.cancelCompletionStreaming,exports.cancelStreamingTTS=__webpack_exports__.cancelStreamingTTS,exports.cancelTTS=__webpack_exports__.cancelTTS,exports.chatCompletion=__webpack_exports__.chatCompletion,exports.chatCompletionStreaming=__webpack_exports__.chatCompletionStreaming,exports.closeApp=__webpack_exports__.closeApp,exports.createStreamingTTS=__webpack_exports__.createStreamingTTS,exports.getImageInfo=__webpack_exports__.getImageInfo,exports.getObjectDetectList=__webpack_exports__.getObjectDetectList,exports.getQuestionSegmentList=__webpack_exports__.getQuestionSegmentList,exports.getSAMInfo=__webpack_exports__.getSAMInfo,exports.onASRResult=__webpack_exports__.onASRResult,exports.readCompletionStreaming=__webpack_exports__.readCompletionStreaming,exports.setBridgeTraceEnabled=__webpack_exports__.setBridgeTraceEnabled,exports.setBridgeTraceLogger=__webpack_exports__.setBridgeTraceLogger,exports.startASR=__webpack_exports__.startASR,exports.startTTS=__webpack_exports__.startTTS,exports.stopASR=__webpack_exports__.stopASR,__webpack_exports__)-1===["APICallError","APICallFailedError","APICallInternalError","APIInvalidParamsError","APIInvalidResultError","APIUnauthorizedError","APIUnregisteredError","MultiModalSDKBridgeError","appendStreamingTTS","cancelCompletionStreaming","cancelStreamingTTS","cancelTTS","chatCompletion","chatCompletionStreaming","closeApp","createStreamingTTS","getImageInfo","getObjectDetectList","getQuestionSegmentList","getSAMInfo","onASRResult","readCompletionStreaming","setBridgeTraceEnabled","setBridgeTraceLogger","startASR","startTTS","stopASR"].indexOf(__webpack_i__)&&(exports[__webpack_i__]=__webpack_exports__[__webpack_i__]);Object.defineProperty(exports,"__esModule",{value:!0});