let e=!1,t=console.debug;function a(...r){e&&t("[Applet Bridge]",...r)}function r(t){e=t}function l(e){t=e}function n(e,t,a){if(!function(e,t,a){let r=e[t];return void 0===r?a?.optional===!0:"string"==typeof r}(e,t,a))throw TypeError(`expect type of "${String(t)}" to be string`)}function s(e,t,a){if(!function(e,t,a){let r=e[t];return void 0===r?a?.optional===!0:"number"==typeof r}(e,t,a))throw TypeError(`expect type of "${String(t)}" to be number`)}function i(e,t,a){let{expectedType:r="object"}=a??{};if(!function(e,t,a){let{typeGuard:r,optional:l}=a??{},n=e[t];return void 0===n?!0===l:"object"==typeof n&&null!==n&&r?.(n)!==!1}(e,t,a))throw TypeError(`expect type of "${String(t)}" to be ${r}`)}let c=(...e)=>a("[Call Result]",...e);var o,d=((o={})[o.SUCCESS=1]="SUCCESS",o[o.FAILED=0]="FAILED",o[o.UNAUTHORIZED=-1]="UNAUTHORIZED",o[o.UNREGISTERED=-2]="UNREGISTERED",o[o.INVALID_PARAMS=-3]="INVALID_PARAMS",o[o.INVALID_RESULT=-4]="INVALID_RESULT",o[o.SETTING_DISABLE=-6]="SETTING_DISABLE",o);class p{}class m extends p{data;constructor(e){super(),this.data=e}static withData(e){return new m(e)}accept(e){return e.success(this)}toRaw(){return{code:1,data:this.data}}}class u extends p{msg;data;constructor(e,t){super(),this.msg=e,this.data=t}static withReason(e){return new u(e)}static withReasonAndData(e,t){return new u(e,t)}accept(e){return e.failed(this)}toRaw(){return{code:0,msg:this.msg,data:this.data}}}class g extends p{code;msg;constructor(e,t){super(),this.code=e,this.msg=t}static invalidParams(){return new g(-3,"Invalid params")}static unregistered(){return new g(-2,"Function not found")}static invalidResult(){return new g(-4,"Invalid result")}static runtimeForbidden(e){return new g(-2,e)}accept(e){return e.internalError(this)}toRaw(){return{code:this.code,msg:this.msg}}}class h extends Error{code;apiName;name;constructor(e,t,a){super(a?`${a}: ${t}`:t),this.code=e,this.apiName=a,this.name="APICallError",Object.setPrototypeOf(this,new.target.prototype)}}class b extends h{name="APICallFailedError";data;constructor(e,t,a){super(d.FAILED,e,a),this.data=t}toCallResult(){return new u(this.message,this.data)}}class f extends h{name="APICallInternalError";constructor(e,t,a){super(e,t,a)}static fromCallResult(e,t){switch(e.code){case d.UNAUTHORIZED:return new I(e.code,e.msg,t);case d.UNREGISTERED:return new v(e.code,e.msg,t);case d.INVALID_PARAMS:return new E(e.code,e.msg,t);case d.INVALID_RESULT:return new w(e.code,e.msg,t);default:return new f(e.code,e.msg,t)}}toCallResult(){return new g(this.code,this.message)}}class I extends f{name="APIUnauthorizedError"}class v extends f{name="APIUnregisteredError"}class E extends f{name="APIInvalidParamsError"}class w extends f{name="APIInvalidResultError"}class S extends h{name="MultiModalSDKBridgeError";constructor(){super(d.UNREGISTERED,"Bridge unavailable")}toCallResult(){return new g(d.UNREGISTERED,"Bridge unavailable")}}function y(e){return"scope"in e&&"string"==typeof e.scope&&"target"in e&&"string"==typeof e.target&&(!("instance"in e)||void 0===e.instance||"string"==typeof e.instance)}let R={clientAPI:()=>({scope:"system",target:"bridge"})},_=(...e)=>a("[Message]",...e);class A{name;params;callbackId;target;constructor(e){this.name=e.name,this.params=e.params??{},this.callbackId=e.callbackId,this.target=e.target}accept(e){return e.functionCall(this)}toPlainObject(){return{type:"call",name:this.name,params:this.params,callbackId:this.callbackId,target:this.target}}}class T{params;callbackId;constructor(e){this.params=e.params,this.callbackId=e.callbackId}get parsedParams(){var e=this.params;try{if(1===e.code){if(void 0===e.data)throw TypeError('undefined "data"');return c('parsed "success"',e.data),m.withData(e.data)}if(0===e.code){let{msg:t,data:a}=e;if(void 0===t)throw TypeError('undefined "msg"');return(c('parsed "failed"',t,a),void 0===a)?u.withReason(t):u.withReasonAndData(t,a)}if(void 0===e.msg)throw TypeError('undefined "msg"');return c('parsed "internal error"',e.msg),new g(e.code,e.msg)}catch(e){return g.invalidResult()}}static fromCallMessage(e,t){return new T({params:t.toRaw(),callbackId:e.callbackId})}accept(e){return e.callback(this)}toPlainObject(){return{type:"callback",params:this.params,callbackId:this.callbackId}}}class k{static _nextTraceId=0;name;params;timestamp;callbackId;constructor(e){let{name:t,params:a={},timestamp:r=Date.now(),callbackId:l=k._nextTraceId++}=e;this.name=t,this.params=a,this.timestamp=r,this.callbackId=l}accept(e){return e.event(this)}toPlainObject(){return{type:"event",name:this.name,params:this.params,timestamp:this.timestamp}}}function C(e){var t;if("object"!=typeof e||null===e)throw TypeError("expect Message to be an object");switch(n(e,"type"),e.type){case"call":return _("parse as function call"),n(e,"name"),s(e,"callbackId"),i(e,"target",{typeGuard:y,expectedType:"TargetEntity"}),i(e,"params",{optional:!0}),new A(e);case"callback":return _("parse as callback"),i(e,"params"),s(t=e.params,"code"),n(t,"msg",{optional:!0}),i(t,"data",{optional:!0}),s(e,"callbackId"),new T({params:e.params,callbackId:e.callbackId});case"event":return _("parse as event"),n(e,"name"),i(e,"params",{optional:!0}),s(e,"timestamp"),new k(e);default:throw TypeError(`unrecognized message type ${e.type}`)}}let P="__bridge_ready__";class M{}let x=(...e)=>a("[LynxView]",...e),D=new class extends M{handshake=!1;available=!0;receiver;init(){if(!lynx.__isSSRInternalUsage)try{__LEPUS__||lynx.getJSModule("GlobalEventEmitter").addListener("__APPLET_BRIDGE__",e=>{x("receive from client",e),this.receiver?.(C(e))})}catch(e){console.error("Applet bridge initialization failed"),x(e),this.available=!1}}notifyReady(){this.handshake||lynx.__isSSRInternalUsage||(NativeModules.AppletBridgeModule.postMessage(new k({name:P}).toPlainObject()),this.handshake=!0)}call(e){if(!lynx.__isSSRInternalUsage){if(x("call to client",e),!this.available)throw new S;NativeModules.AppletBridgeModule.postMessage(e.toPlainObject())}}listen(e){this.receiver=e}},L=(...e)=>a("[WebView]",...e);function N(e){L("(global) call to client",e),AppletBridgeModule.postMessage(JSON.stringify(e.toPlainObject()))}let H=new class extends M{receiver;get available(){return this.receiver?.isAvailable()??!1}init(){globalThis.onWebViewMessage??=function(){let e=new Set,t=!1,a=!0,r=e=>{let t=e.ports[0];"__channel_init__"===e.data&&t&&(globalThis.removeEventListener("message",r),l.port=t,t.onmessage=e=>{if(e&&"string"==typeof e.data){L("(MessagePort) receive from client",e.data);try{l(e.data)}catch(e){throw L("(MessagePort) receive raw message error",e),e}}},t.postMessage("__channel_ack__"))},l=t=>{L("(global) receive from client",t);let a=C(JSON.parse(t));for(let t of e)t(a)};return l.on=t=>void e.add(t),l.off=t=>void e.delete(t),l.isAvailable=()=>a,l.notifyReady=()=>{if(!t){try{N(new k({name:P}))}catch(e){console.error("Applet bridge initialization failed"),L(e),a=!1}t=!0}},l.port=void 0,l._testReset=()=>{globalThis.removeEventListener("message",r),globalThis.addEventListener?.("message",r)},globalThis.addEventListener?.("message",r),l}(),this.receiver=globalThis.onWebViewMessage}notifyReady(){this.receiver?.notifyReady()}call(e){if(!this.available)throw new S;let{port:t}=globalThis.onWebViewMessage;t?(L("(MessagePort) call to client",e),t.postMessage(JSON.stringify(e.toPlainObject()))):N(e)}listen(e){this.receiver?.on(e)}},U="object"==typeof lynx&&"object"==typeof NativeModules?D:H;U.init(),U.notifyReady();let B=(...e)=>a("[EventCenter]",...e),O=new class{_functionCallHandlers={};_callbackHandlers={};_rawCallbackHandlers={};_eventHandlers={};_clientBridge;constructor(e){let t;this._clientBridge=e,this._clientBridge.listen(e=>{e.accept({functionCall:e=>void this.dispatchCallMessage(e),callback:e=>this.dispatchCallbackMessage(e),event:e=>this.dispatchEventMessage(e)})}),globalThis.globalEventIDGenerator??=(t=1,{next:()=>t++,reset:()=>{t=1}})}get nextCallbackId(){return globalThis.globalEventIDGenerator.next()}registerFunctionCallHandler(e,t,a){B("register function call handler",e);let{typeGuard:r,allowOverwrite:l=!1}=a??{};if(!l&&this._functionCallHandlers[e])throw Error(`Function call handler already exists for function name ${e}`);let n=e=>{if(r?.(e)===!1)throw f.fromCallResult(g.invalidParams());return t(e)};return this._functionCallHandlers[e]=n,()=>{this._functionCallHandlers[e]===n&&delete this._functionCallHandlers[e]}}registerEventHandler(e,t,a){B("register event handler",e);let{typeGuard:r}=a??{},l=e=>{r?.(e)!==!1&&t(e)};return this._eventHandlers[e]??=new Set,this._eventHandlers[e].add(l),()=>{this._eventHandlers[e].delete(l)}}registerCallback(e,t,a){let{typeGuard:r,apiName:l}=a??{},n=this.nextCallbackId;return B(`register callback handler for id: ${n}`),this._callbackHandlers[n]=a=>a.accept({success:e=>r?.(e.data)===!1?g.invalidResult():e,failed:e=>(e.data,e),internalError:e=>e}).accept({success:t=>e(t.data),failed:e=>t(new b(e.msg,e.data,l)),internalError:e=>t(f.fromCallResult(e,l))}),n}registerRawCallback(e){let t=this.nextCallbackId;return B(`register raw callback handler for id: ${t}`),this._rawCallbackHandlers[t]=e,t}async dispatchCallMessage(e){B(`dispatch call message. name = ${e.name},`,e.params);let t=t=>{B("send callback",t),this._clientBridge.call(T.fromCallMessage(e,t))};if(!e.name)return t(g.invalidParams());let a=this._functionCallHandlers[e.name];if(!a)return t(g.unregistered());let{params:r}=e;try{B("invoke function call handler");let e=await a(r);t(m.withData(e))}catch(e){t(e instanceof h?e.toCallResult():e instanceof Error?u.withReason(e.message):e?u.withReason(e.toString()):u.withReason("Function invocation failed: unknown error"))}}dispatchCallbackMessage(e){B(`dispatch callback message. id = ${e.callbackId}`);let{callbackId:t}=e,a=this._callbackHandlers[t],r=this._rawCallbackHandlers[t];try{B("invoke callback handler"),a&&(delete this._callbackHandlers[t],a(e.parsedParams)),r&&(delete this._rawCallbackHandlers[t],r(e.params))}catch(e){console.error(e)}}dispatchEventMessage(e){if(B(`dispatch event message. name = ${e.name},`,e.params),!e.name)return;let{params:t}=e,a=this._eventHandlers[e.name];if(B(`handlers to invoke: ${a?.size??0}`),a&&0!==a.size)for(let e of a)try{e(t)}catch(e){console.error(e)}}}(U),j=(...e)=>a("[Client API]",...e);function G(e,t,a){return new Promise((r,l)=>{let{resultTypeGuard:n,transformParams:s}=a??{};try{j("call AppletBridge",e,t),U.call(new A({name:e,params:s?s(t):t,target:R.clientAPI(),callbackId:O.registerCallback(r,l,{typeGuard:n,apiName:e})}))}catch(e){j("call AppletBridge error",e),l(e)}})}function $(e,t){return a=>G(e,a??{},t)}let V=$("applet.subscribeEvent");$("applet.unsubscribeEvent");let F=$("applet.multimodal.startASR"),z=$("applet.multimodal.stopASR"),J=function(e,t){let{paramsTypeGuard:a,isPrivate:r=!1}=(void 0)??{},l=!1;return t=>(r||l||(V({eventName:e,timestamp:Date.now()}),l=!0),j("listen AppletBridge event",e),O.registerEventHandler(e,t,{typeGuard:a}))}("applet.multimodal.ASRResult"),W=$("app.close"),Z=$("mind.getQuestionSegmentList"),K=$("applet.multimodal.startTTS"),Q=$("applet.multimodal.cancelTTS"),q=$("applet.multimodal.createStreamingTTS"),X=$("applet.multimodal.appendStreamingTTS"),Y=$("applet.multimodal.cancelStreamingTTS"),ee=$("applet.multimodal.getImageInfo"),et=$("applet.multimodal.getObjectDetectList"),ea=$("applet.multimodal.getSAMInfo"),er=$("applet.multimodal.chatCompletion"),el=$("applet.multimodal.chatCompletionStreamingRequest"),en=$("applet.multimodal.chatCompletionStreamingRead"),es=$("applet.multimodal.cancelCompletionStreaming");export{h as APICallError,b as APICallFailedError,f as APICallInternalError,E as APIInvalidParamsError,w as APIInvalidResultError,I as APIUnauthorizedError,v as APIUnregisteredError,S as MultiModalSDKBridgeError,X as appendStreamingTTS,es as cancelCompletionStreaming,Y as cancelStreamingTTS,Q as cancelTTS,er as chatCompletion,el as chatCompletionStreaming,W as closeApp,q as createStreamingTTS,ee as getImageInfo,et as getObjectDetectList,Z as getQuestionSegmentList,ea as getSAMInfo,J as onASRResult,en as readCompletionStreaming,r as setBridgeTraceEnabled,l as setBridgeTraceLogger,F as startASR,K as startTTS,z as stopASR};